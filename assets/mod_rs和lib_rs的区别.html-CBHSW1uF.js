import{_ as n,c as a,b as e,o as l}from"./app-WzcM213c.js";const i={};function r(d,s){return l(),a("div",null,[...s[0]||(s[0]=[e(`<p>在 Rust 中，<code>mod.rs</code> 和 <code>lib.rs</code> 有以下区别：</p><h2 id="lib-rs" tabindex="-1"><a class="header-anchor" href="#lib-rs"><span><strong>lib.rs</strong></span></a></h2><ul><li><strong>库的根文件</strong>（crate root）</li><li>定义一个库 crate 的入口点</li><li>在 <code>Cargo.toml</code> 中通过 <code>[lib]</code> 配置指定</li><li>一个项目通常只有一个 <code>lib.rs</code></li><li>用于导出整个库的公共 API</li></ul><h2 id="mod-rs" tabindex="-1"><a class="header-anchor" href="#mod-rs"><span><strong>mod.rs</strong></span></a></h2><ul><li><strong>模块目录的入口文件</strong></li><li>用于将一个目录组织成一个模块</li><li>可以有多个 <code>mod.rs</code> 文件（在不同的子目录中）</li><li>从 Rust 2018 版本开始，可以用与目录同名的 <code>.rs</code> 文件替代</li></ul><h2 id="在你的项目中的例子" tabindex="-1"><a class="header-anchor" href="#在你的项目中的例子"><span><strong>在你的项目中的例子：</strong></span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">components/lib.rs                          # 整个 components 库的根入口</span>
<span class="line">components/biz-service/mod.rs              # biz-service 模块的入口</span>
<span class="line">components/foundation/mod.rs               # foundation 模块的入口</span>
<span class="line">components/platform-service/mod.rs         # platform-service 模块的入口</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span><strong>使用示例：</strong></span></a></h2><p><strong>传统方式（使用 mod.rs）：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">my_module/</span>
<span class="line">  ├── mod.rs        # 模块入口</span>
<span class="line">  ├── submodule1.rs</span>
<span class="line">  └── submodule2.rs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现代方式（Rust 2018+）：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">my_module.rs        # 直接用文件名作为模块</span>
<span class="line">my_module/</span>
<span class="line">  ├── submodule1.rs</span>
<span class="line">  └── submodule2.rs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mod-rs-的作用" tabindex="-1"><a class="header-anchor" href="#mod-rs-的作用"><span><code>mod.rs</code> 的作用</span></a></h2><h3 id="_1-模块声明和导出" tabindex="-1"><a class="header-anchor" href="#_1-模块声明和导出"><span>1. <strong>模块声明和导出</strong></span></a></h3><p><code>mod.rs</code> 是 Rust 中<strong>模块系统</strong>的核心文件，它的主要作用是：</p><ul><li><strong>声明子模块</strong>：告诉 Rust 编译器这个目录下有哪些子模块</li><li><strong>控制可见性</strong>：决定哪些模块和函数可以被外部访问</li><li><strong>重新导出</strong>：可以将子模块的内容重新导出，简化外部使用</li></ul><h3 id="_2-具体例子分析" tabindex="-1"><a class="header-anchor" href="#_2-具体例子分析"><span>2. <strong>具体例子分析</strong></span></a></h3><h4 id="ai-summary-mod-rs" tabindex="-1"><a class="header-anchor" href="#ai-summary-mod-rs"><span><code>ai_summary/mod.rs</code>：</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// Add your use cases here</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">get_insights_summary_use_case</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明了 <code>get_insights_summary_use_case</code> 模块</li><li>但没有 <code>pub</code>，所以这个模块是私有的</li></ul><h4 id="request-mod-rs" tabindex="-1"><a class="header-anchor" href="#request-mod-rs"><span><code>request/mod.rs</code>：</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">ai_summary</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">http_client</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明了两个公共模块</li><li>使用 <code>pub</code> 关键字，所以外部可以访问这些模块</li></ul><h3 id="_3-不写-mod-rs-会怎样" tabindex="-1"><a class="header-anchor" href="#_3-不写-mod-rs-会怎样"><span>3. <strong>不写 <code>mod.rs</code> 会怎样？</strong></span></a></h3><p><strong>不可以不写！</strong> 如果不写 <code>mod.rs</code>，会出现以下问题：</p><h4 id="问题1-编译错误" tabindex="-1"><a class="header-anchor" href="#问题1-编译错误"><span>问题1：编译错误</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 如果父模块中有这样的代码：</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">ai_summary</span><span class="token punctuation">;</span>  <span class="token comment">// 会报错：找不到模块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="问题2-无法访问子模块" tabindex="-1"><a class="header-anchor" href="#问题2-无法访问子模块"><span>问题2：无法访问子模块</span></a></h4><ul><li>没有 <code>mod.rs</code>，Rust 不知道这个目录是一个模块</li><li>无法从外部访问目录内的文件</li></ul><h3 id="_4-rust-模块系统的规则" tabindex="-1"><a class="header-anchor" href="#_4-rust-模块系统的规则"><span>4. <strong>Rust 模块系统的规则</strong></span></a></h3><h4 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构：</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">src/</span>
<span class="line">├── lib.rs</span>
<span class="line">├── public/</span>
<span class="line">│   └── use_case/</span>
<span class="line">│       └── ai_summary/</span>
<span class="line">│           ├── mod.rs          ← 必须存在</span>
<span class="line">│           └── get_insights_summary_use_case.rs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对应的模块声明" tabindex="-1"><a class="header-anchor" href="#对应的模块声明"><span>对应的模块声明：</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 在 lib.rs 中</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">public</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在 public/mod.rs 中</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">use_case</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在 public/use_case/mod.rs 中</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">ai_summary</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在 public/use_case/ai_summary/mod.rs 中</span></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">get_insights_summary_use_case</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-最佳实践" tabindex="-1"><a class="header-anchor" href="#_5-最佳实践"><span>5. <strong>最佳实践</strong></span></a></h3><h4 id="完整的-mod-rs-示例" tabindex="-1"><a class="header-anchor" href="#完整的-mod-rs-示例"><span>完整的 <code>mod.rs</code> 示例：</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">//! AI Summary use cases</span></span>
<span class="line"><span class="token comment">//!</span></span>
<span class="line"><span class="token comment">//! This module contains use cases for AI summary functionality.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">mod</span> <span class="token module-declaration namespace">get_insights_summary_use_case</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 重新导出，简化外部使用</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token namespace">get_insights_summary_use_case<span class="token punctuation">::</span></span>get_insights_summary<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong><code>mod.rs</code> 是必须的！</strong> 它的作用是：</p><ol><li><strong>模块声明</strong>：告诉 Rust 这个目录是一个模块</li><li><strong>可见性控制</strong>：决定哪些内容可以被外部访问</li><li><strong>重新导出</strong>：简化外部使用</li><li><strong>文档说明</strong>：提供模块的文档注释</li></ol><p>没有 <code>mod.rs</code>，Rust 无法识别目录结构，会导致编译错误。这是 Rust 模块系统的基础，不能省略。</p>`,41)])])}const o=n(i,[["render",r]]),t=JSON.parse('{"path":"/rust_p/06_others/mod_rs%E5%92%8Clib_rs%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"lib.rs","slug":"lib-rs","link":"#lib-rs","children":[]},{"level":2,"title":"mod.rs","slug":"mod-rs","link":"#mod-rs","children":[]},{"level":2,"title":"在你的项目中的例子：","slug":"在你的项目中的例子","link":"#在你的项目中的例子","children":[]},{"level":2,"title":"使用示例：","slug":"使用示例","link":"#使用示例","children":[]},{"level":2,"title":"mod.rs 的作用","slug":"mod-rs-的作用","link":"#mod-rs-的作用","children":[{"level":3,"title":"1. 模块声明和导出","slug":"_1-模块声明和导出","link":"#_1-模块声明和导出","children":[]},{"level":3,"title":"2. 具体例子分析","slug":"_2-具体例子分析","link":"#_2-具体例子分析","children":[]},{"level":3,"title":"3. 不写 mod.rs 会怎样？","slug":"_3-不写-mod-rs-会怎样","link":"#_3-不写-mod-rs-会怎样","children":[]},{"level":3,"title":"4. Rust 模块系统的规则","slug":"_4-rust-模块系统的规则","link":"#_4-rust-模块系统的规则","children":[]},{"level":3,"title":"5. 最佳实践","slug":"_5-最佳实践","link":"#_5-最佳实践","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1761491612000,"contributors":[{"name":"jinpeng.gao","username":"","email":"jinpeng.gao@okg.com","commits":1},{"name":"uponup","username":"uponup","email":"1030360567@qq.com","commits":1,"url":"https://github.com/uponup"}],"changelog":[{"hash":"5456040ee4b483f78ba6a68a1887ff67ab3316c6","time":1761491612000,"email":"1030360567@qq.com","author":"uponup","message":"fix rust"},{"hash":"d70ba6dad61962cc67cf67d5fa022d37518a27a1","time":1760760973000,"email":"jinpeng.gao@okg.com","author":"jinpeng.gao","message":"fix"}]},"filePathRelative":"rust_p/06_others/mod_rs和lib_rs的区别.md"}');export{o as comp,t as data};
