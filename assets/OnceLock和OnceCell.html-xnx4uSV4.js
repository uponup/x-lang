import{_ as s,c as a,b as p,o as t}from"./app-WzcM213c.js";const e={};function c(l,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="oncelock-和-oncecell-详解" tabindex="-1"><a class="header-anchor" href="#oncelock-和-oncecell-详解"><span>OnceLock 和 OnceCell 详解</span></a></h1><h2 id="一、核心概念" tabindex="-1"><a class="header-anchor" href="#一、核心概念"><span>一、核心概念</span></a></h2><p><strong>延迟初始化</strong>和<strong>单次赋值</strong>：创建时为空，只能赋值一次，适合全局单例和懒加载。</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">let</span> cell <span class="token operator">=</span> <span class="token class-name">OnceCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">cell<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ✅ 第一次成功</span></span>
<span class="line">cell<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ 第二次失败</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、三种类型对比" tabindex="-1"><a class="header-anchor" href="#二、三种类型对比"><span>二、三种类型对比</span></a></h2><h3 id="核心区别" tabindex="-1"><a class="header-anchor" href="#核心区别"><span>核心区别</span></a></h3><table><thead><tr><th>特性</th><th><code>std::cell::OnceCell</code></th><th><code>std::sync::OnceLock</code></th><th><code>tokio::sync::OnceCell</code></th></tr></thead><tbody><tr><td><strong>线程安全</strong></td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td><strong>异步</strong></td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td><strong>位置</strong></td><td><code>std::cell</code></td><td><code>std::sync</code></td><td><code>tokio::sync</code></td></tr><tr><td><strong>等待机制</strong></td><td>单线程</td><td>阻塞线程</td><td>yield 任务</td></tr><tr><td><strong>场景</strong></td><td>单线程同步</td><td>多线程同步</td><td><strong>异步运行时</strong></td></tr></tbody></table><h3 id="快速选择" tabindex="-1"><a class="header-anchor" href="#快速选择"><span>快速选择</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">需要延迟初始化？</span>
<span class="line">│</span>
<span class="line">├─ 在 Tokio 异步环境？</span>
<span class="line">│  └─→ tokio::sync::OnceCell ✅</span>
<span class="line">│</span>
<span class="line">├─ 单线程同步？</span>
<span class="line">│  └─→ std::cell::OnceCell</span>
<span class="line">│</span>
<span class="line">└─ 多线程同步？</span>
<span class="line">   └─→ std::sync::OnceLock</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="三、基础用法" tabindex="-1"><a class="header-anchor" href="#三、基础用法"><span>三、基础用法</span></a></h2><h3 id="_1-oncecell-单线程" tabindex="-1"><a class="header-anchor" href="#_1-oncecell-单线程"><span>1. OnceCell（单线程）</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token class-name">OnceCell</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> cell <span class="token operator">=</span> <span class="token class-name">OnceCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置</span></span>
<span class="line">cell<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取</span></span>
<span class="line"><span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 懒加载</span></span>
<span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;首次初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token number">42</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-oncelock-多线程同步" tabindex="-1"><a class="header-anchor" href="#_2-oncelock-多线程同步"><span>2. OnceLock（多线程同步）</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">OnceLock</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">CONFIG</span><span class="token punctuation">:</span> <span class="token class-name">OnceLock</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceLock</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">get_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">CONFIG</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;配置数据&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-tokio-oncecell-异步" tabindex="-1"><a class="header-anchor" href="#_3-tokio-oncecell-异步"><span>3. Tokio OnceCell（异步）</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">OnceCell</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">DATA</span><span class="token punctuation">:</span> <span class="token class-name">OnceCell</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceCell</span><span class="token punctuation">::</span><span class="token function">const_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 异步初始化</span></span>
<span class="line">        <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;异步数据&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、关键问题解答" tabindex="-1"><a class="header-anchor" href="#四、关键问题解答"><span>四、关键问题解答</span></a></h2><h3 id="⚠️-问题1-线程安全-异步" tabindex="-1"><a class="header-anchor" href="#⚠️-问题1-线程安全-异步"><span>⚠️ 问题1：线程安全 ≠ 异步</span></a></h3><p><strong>重要</strong>：<code>OnceLock</code> 是<strong>线程安全</strong>的，但<strong>不是异步</strong>的！</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">线程安全（Thread-Safe）</span>
<span class="line">- 多个线程可以同时安全访问</span>
<span class="line">- ✅ OnceLock 是线程安全的</span>
<span class="line">- ✅ tokio::OnceCell 也是线程安全的</span>
<span class="line"></span>
<span class="line">异步（Async）</span>
<span class="line">- 等待时不阻塞线程，可以执行其他任务</span>
<span class="line">- ❌ OnceLock 不是异步的（会阻塞）</span>
<span class="line">- ✅ tokio::OnceCell 是异步的</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔥-问题2-为什么-tokio-要重新实现" tabindex="-1"><a class="header-anchor" href="#🔥-问题2-为什么-tokio-要重新实现"><span>🔥 问题2：为什么 Tokio 要重新实现？</span></a></h3><p>因为 <strong><code>OnceLock</code> 会阻塞线程</strong>，在异步环境中会严重影响性能！</p><h4 id="阻塞示例-oncelock" tabindex="-1"><a class="header-anchor" href="#阻塞示例-oncelock"><span>阻塞示例（OnceLock）</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tokio::main(flavor = <span class="token string">&quot;current_thread&quot;</span>)]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token constant">DATA</span><span class="token punctuation">:</span> <span class="token class-name">OnceLock</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceLock</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 任务1：快速任务</span></span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;任务1: {}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 任务2：使用 OnceLock</span></span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ⚠️ 阻塞整个线程 2 秒！</span></span>
<span class="line">            <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输出：</span></span>
<span class="line"><span class="token comment">// 任务1: 0</span></span>
<span class="line"><span class="token comment">// （2秒阻塞，任务1无法执行）</span></span>
<span class="line"><span class="token comment">// 任务1: 1</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异步示例-tokio-oncecell" tabindex="-1"><a class="header-anchor" href="#异步示例-tokio-oncecell"><span>异步示例（Tokio OnceCell）</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tokio::main(flavor = <span class="token string">&quot;current_thread&quot;</span>)]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token constant">DATA</span><span class="token punctuation">:</span> <span class="token class-name">OnceCell</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceCell</span><span class="token punctuation">::</span><span class="token function">const_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 任务1：快速任务</span></span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;任务1: {}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 任务2：使用 Tokio OnceCell</span></span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ✅ 异步等待，不阻塞线程</span></span>
<span class="line">            <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输出：</span></span>
<span class="line"><span class="token comment">// 任务1: 0</span></span>
<span class="line"><span class="token comment">// 任务1: 1  ← 初始化期间仍能执行！</span></span>
<span class="line"><span class="token comment">// 任务1: 2</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🚗-类比理解" tabindex="-1"><a class="header-anchor" href="#🚗-类比理解"><span>🚗 类比理解</span></a></h3><p><strong>OnceLock（阻塞）</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">线程：[任务A等待🚗🔴.............]</span>
<span class="line">      ↑ 整条路被占用，其他任务无法通行 ❌</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tokio OnceCell（异步）</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">线程：[任务B🚗 任务C🚗 任务D🚗]</span>
<span class="line">      ↑ 任务A让出道路，其他任务继续 ✅</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="📊-性能对比" tabindex="-1"><a class="header-anchor" href="#📊-性能对比"><span>📊 性能对比</span></a></h3><table><thead><tr><th>场景</th><th>OnceLock</th><th>Tokio OnceCell</th></tr></thead><tbody><tr><td>单线程运行时</td><td>阻塞所有任务</td><td>仅等待初始化的任务暂停</td></tr><tr><td>多线程运行时</td><td>阻塞一个线程</td><td>不阻塞线程</td></tr><tr><td>100个并发请求</td><td>可能依次处理</td><td>并发处理</td></tr></tbody></table><hr><h2 id="五、实战场景" tabindex="-1"><a class="header-anchor" href="#五、实战场景"><span>五、实战场景</span></a></h2><h3 id="场景1-全局配置" tabindex="-1"><a class="header-anchor" href="#场景1-全局配置"><span>场景1：全局配置</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">OnceLock</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">    host<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    port<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">CONFIG</span><span class="token punctuation">:</span> <span class="token class-name">OnceLock</span><span class="token operator">&lt;</span><span class="token class-name">Config</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceLock</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">get_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">CONFIG</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">        host<span class="token punctuation">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="场景2-异步数据库连接池" tabindex="-1"><a class="header-anchor" href="#场景2-异步数据库连接池"><span>场景2：异步数据库连接池</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">OnceCell</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">sqlx<span class="token punctuation">::</span></span><span class="token class-name">PgPool</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">DB_POOL</span><span class="token punctuation">:</span> <span class="token class-name">OnceCell</span><span class="token operator">&lt;</span><span class="token class-name">PgPool</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceCell</span><span class="token punctuation">::</span><span class="token function">const_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_db_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">PgPool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">DB_POOL</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">PgPool</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;postgres://localhost/mydb&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;无法连接数据库&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> pool <span class="token operator">=</span> <span class="token function">get_db_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 使用连接池</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="场景3-http-客户端单例" tabindex="-1"><a class="header-anchor" href="#场景3-http-客户端单例"><span>场景3：HTTP 客户端单例</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">OnceCell</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">HTTP_CLIENT</span><span class="token punctuation">:</span> <span class="token class-name">OnceCell</span><span class="token operator">&lt;</span><span class="token class-name">Client</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceCell</span><span class="token punctuation">::</span><span class="token function">const_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_http_client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">HTTP_CLIENT</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="场景4-正则表达式缓存" tabindex="-1"><a class="header-anchor" href="#场景4-正则表达式缓存"><span>场景4：正则表达式缓存</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">OnceLock</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">regex<span class="token punctuation">::</span></span><span class="token class-name">Regex</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">email_regex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">Regex</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token constant">REGEX</span><span class="token punctuation">:</span> <span class="token class-name">OnceLock</span><span class="token operator">&lt;</span><span class="token class-name">Regex</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceLock</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token constant">REGEX</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Regex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">r&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">is_valid_email</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">email_regex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_match</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、常用方法" tabindex="-1"><a class="header-anchor" href="#六、常用方法"><span>六、常用方法</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 1. set - 设置值（只能一次）</span></span>
<span class="line">cell<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. get - 获取引用</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. get_or_init - 懒加载（最常用）</span></span>
<span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token function">expensive_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. get_or_try_init - 可能失败的初始化</span></span>
<span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">get_or_try_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span>_<span class="token punctuation">,</span> _<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token function">fallible_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5. take - 取出值</span></span>
<span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 6. into_inner - 转换为 Option</span></span>
<span class="line"><span class="token keyword">let</span> option <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">into_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、最佳实践" tabindex="-1"><a class="header-anchor" href="#七、最佳实践"><span>七、最佳实践</span></a></h2><h3 id="✅-推荐做法" tabindex="-1"><a class="header-anchor" href="#✅-推荐做法"><span>✅ 推荐做法</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 1. 异步环境用 tokio::sync::OnceCell</span></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token constant">DATA</span><span class="token punctuation">:</span> <span class="token class-name">OnceCell</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceCell</span><span class="token punctuation">::</span><span class="token function">const_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fetch_from_api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 同步多线程用 std::sync::OnceLock</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token constant">DATA</span><span class="token punctuation">:</span> <span class="token class-name">OnceLock</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceLock</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">expensive_computation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 单线程用 std::cell::OnceCell</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">single_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> cell <span class="token operator">=</span> <span class="token class-name">OnceCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    cell<span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="❌-避免做法" tabindex="-1"><a class="header-anchor" href="#❌-避免做法"><span>❌ 避免做法</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 不要在异步环境用 OnceLock</span></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token constant">DATA</span><span class="token punctuation">:</span> <span class="token class-name">OnceLock</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceLock</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// ⚠️ 这会阻塞 Tokio 工作线程！</span></span>
<span class="line">    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ❌ 不要用 spawn_blocking 包装 OnceLock</span></span>
<span class="line"><span class="token comment">// 开销大，返回值不是 &amp;&#39;static，不优雅</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="八、与其他方案对比" tabindex="-1"><a class="header-anchor" href="#八、与其他方案对比"><span>八、与其他方案对比</span></a></h2><h3 id="vs-lazy-static" tabindex="-1"><a class="header-anchor" href="#vs-lazy-static"><span>vs lazy_static</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 旧方式：需要外部 crate</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">lazy_static<span class="token punctuation">::</span></span>lazy_static<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property">lazy_static!</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">ref</span> <span class="token constant">CONFIG</span><span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token function">load_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 新方式：标准库</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">OnceLock</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">CONFIG</span><span class="token punctuation">:</span> <span class="token class-name">OnceLock</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceLock</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">get_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">CONFIG</span><span class="token punctuation">.</span><span class="token function">get_or_init</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token function">load_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优势</strong>：</p><ul><li>✅ 标准库，无需外部依赖</li><li>✅ 更灵活（可运行时设置）</li><li>✅ 更轻量</li></ul><h3 id="vs-mutex-option-t" tabindex="-1"><a class="header-anchor" href="#vs-mutex-option-t"><span>vs <code>Mutex&lt;Option&lt;T&gt;&gt;</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 繁琐的方式</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">DATA</span><span class="token punctuation">:</span> <span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 简洁的方式</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token constant">DATA</span><span class="token punctuation">:</span> <span class="token class-name">OnceLock</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token class-name">OnceLock</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 优势：</span></span>
<span class="line"><span class="token comment">// - 代码更简洁</span></span>
<span class="line"><span class="token comment">// - 初始化后无锁读取（性能更好）</span></span>
<span class="line"><span class="token comment">// - 返回 &amp;&#39;static 引用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="九、总结" tabindex="-1"><a class="header-anchor" href="#九、总结"><span>九、总结</span></a></h2><h3 id="核心要点" tabindex="-1"><a class="header-anchor" href="#核心要点"><span>核心要点</span></a></h3><ol><li><p><strong>三种类型</strong>：</p><ul><li><code>OnceCell</code> = 单线程</li><li><code>OnceLock</code> = 多线程同步（会阻塞）</li><li><code>tokio::OnceCell</code> = 异步（不阻塞）</li></ul></li><li><p><strong>线程安全 ≠ 异步</strong>：</p><ul><li><code>OnceLock</code> 是线程安全的，但会阻塞线程</li><li><code>tokio::OnceCell</code> 既线程安全又异步</li></ul></li><li><p><strong>在 Tokio 中必须用异步版本</strong>：</p><ul><li>否则会阻塞工作线程，严重影响性能</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>全局单例</li><li>懒加载资源</li><li>配置管理</li><li>数据库连接池</li><li>HTTP 客户端</li></ul></li></ol><h3 id="记忆口诀" tabindex="-1"><a class="header-anchor" href="#记忆口诀"><span>记忆口诀</span></a></h3><ul><li><strong>OnceCell</strong> = Cell 家族 = 单线程</li><li><strong>OnceLock</strong> = Lock 家族 = 多线程同步</li><li><strong>tokio::OnceCell</strong> = 异步友好 = Tokio 专用</li></ul><h3 id="使用建议" tabindex="-1"><a class="header-anchor" href="#使用建议"><span>使用建议</span></a></h3><table><thead><tr><th>场景</th><th>推荐</th></tr></thead><tbody><tr><td>Tokio 异步代码</td><td><code>tokio::sync::OnceCell</code> ⭐</td></tr><tr><td>同步多线程</td><td><code>std::sync::OnceLock</code></td></tr><tr><td>单线程</td><td><code>std::cell::OnceCell</code></td></tr></tbody></table><p><strong>关键教训</strong>：在 Tokio 异步环境中，<strong>始终使用 <code>tokio::sync::OnceCell</code></strong>，而不是 <code>std::sync::OnceLock</code>。这不仅是 API 选择，而是性能和正确性的关键！🚀✨</p>`,72)])])}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/rust_p/06_others/OnceLock%E5%92%8COnceCell.html","title":"OnceLock 和 OnceCell 详解","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、核心概念","slug":"一、核心概念","link":"#一、核心概念","children":[]},{"level":2,"title":"二、三种类型对比","slug":"二、三种类型对比","link":"#二、三种类型对比","children":[{"level":3,"title":"核心区别","slug":"核心区别","link":"#核心区别","children":[]},{"level":3,"title":"快速选择","slug":"快速选择","link":"#快速选择","children":[]}]},{"level":2,"title":"三、基础用法","slug":"三、基础用法","link":"#三、基础用法","children":[{"level":3,"title":"1. OnceCell（单线程）","slug":"_1-oncecell-单线程","link":"#_1-oncecell-单线程","children":[]},{"level":3,"title":"2. OnceLock（多线程同步）","slug":"_2-oncelock-多线程同步","link":"#_2-oncelock-多线程同步","children":[]},{"level":3,"title":"3. Tokio OnceCell（异步）","slug":"_3-tokio-oncecell-异步","link":"#_3-tokio-oncecell-异步","children":[]}]},{"level":2,"title":"四、关键问题解答","slug":"四、关键问题解答","link":"#四、关键问题解答","children":[{"level":3,"title":"⚠️ 问题1：线程安全 ≠ 异步","slug":"⚠️-问题1-线程安全-异步","link":"#⚠️-问题1-线程安全-异步","children":[]},{"level":3,"title":"🔥 问题2：为什么 Tokio 要重新实现？","slug":"🔥-问题2-为什么-tokio-要重新实现","link":"#🔥-问题2-为什么-tokio-要重新实现","children":[]},{"level":3,"title":"🚗 类比理解","slug":"🚗-类比理解","link":"#🚗-类比理解","children":[]},{"level":3,"title":"📊 性能对比","slug":"📊-性能对比","link":"#📊-性能对比","children":[]}]},{"level":2,"title":"五、实战场景","slug":"五、实战场景","link":"#五、实战场景","children":[{"level":3,"title":"场景1：全局配置","slug":"场景1-全局配置","link":"#场景1-全局配置","children":[]},{"level":3,"title":"场景2：异步数据库连接池","slug":"场景2-异步数据库连接池","link":"#场景2-异步数据库连接池","children":[]},{"level":3,"title":"场景3：HTTP 客户端单例","slug":"场景3-http-客户端单例","link":"#场景3-http-客户端单例","children":[]},{"level":3,"title":"场景4：正则表达式缓存","slug":"场景4-正则表达式缓存","link":"#场景4-正则表达式缓存","children":[]}]},{"level":2,"title":"六、常用方法","slug":"六、常用方法","link":"#六、常用方法","children":[]},{"level":2,"title":"七、最佳实践","slug":"七、最佳实践","link":"#七、最佳实践","children":[{"level":3,"title":"✅ 推荐做法","slug":"✅-推荐做法","link":"#✅-推荐做法","children":[]},{"level":3,"title":"❌ 避免做法","slug":"❌-避免做法","link":"#❌-避免做法","children":[]}]},{"level":2,"title":"八、与其他方案对比","slug":"八、与其他方案对比","link":"#八、与其他方案对比","children":[{"level":3,"title":"vs lazy_static","slug":"vs-lazy-static","link":"#vs-lazy-static","children":[]},{"level":3,"title":"vs Mutex<Option<T>>","slug":"vs-mutex-option-t","link":"#vs-mutex-option-t","children":[]}]},{"level":2,"title":"九、总结","slug":"九、总结","link":"#九、总结","children":[{"level":3,"title":"核心要点","slug":"核心要点","link":"#核心要点","children":[]},{"level":3,"title":"记忆口诀","slug":"记忆口诀","link":"#记忆口诀","children":[]},{"level":3,"title":"使用建议","slug":"使用建议","link":"#使用建议","children":[]}]}],"git":{"updatedTime":1761492282000,"contributors":[{"name":"uponup","username":"uponup","email":"1030360567@qq.com","commits":2,"url":"https://github.com/uponup"}],"changelog":[{"hash":"d240164eccee207a79705131dd86dd1d0a6a82be","time":1761492282000,"email":"1030360567@qq.com","author":"uponup","message":"fix"},{"hash":"5456040ee4b483f78ba6a68a1887ff67ab3316c6","time":1761491612000,"email":"1030360567@qq.com","author":"uponup","message":"fix rust"}]},"filePathRelative":"rust_p/06_others/OnceLock和OnceCell.md"}');export{i as comp,u as data};
