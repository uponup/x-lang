import{_ as l,c,b as i,a as s,d as p,w as t,r as o,o as u,e}from"./app-WzcM213c.js";const r={};function k(d,n){const a=o("RouteLink");return u(),c("div",null,[n[4]||(n[4]=i(`<h1 id="tokio-入门-rust-异步编程" tabindex="-1"><a class="header-anchor" href="#tokio-入门-rust-异步编程"><span>Tokio 入门：Rust 异步编程</span></a></h1><h2 id="什么是-tokio" tabindex="-1"><a class="header-anchor" href="#什么是-tokio"><span>什么是 Tokio</span></a></h2><p><strong>Tokio</strong> 是 Rust 生态系统中最流行的<strong>异步运行时</strong>（Async Runtime），用于编写高性能的异步应用程序。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Tokio = 异步运行时 + 异步 I/O + 任务调度 + 定时器 + 网络工具</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 同步代码 - 阻塞等待</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">fetch_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 等待网络响应... 线程被阻塞</span></span>
<span class="line">    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token string">&quot;数据&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 异步代码 - 不阻塞</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">fetch_data_async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 等待时可以做其他事... 线程不阻塞</span></span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token string">&quot;数据&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么需要-tokio" tabindex="-1"><a class="header-anchor" href="#为什么需要-tokio"><span>为什么需要 Tokio？</span></a></h2><h3 id="问题-传统同步-i-o-的限制" tabindex="-1"><a class="header-anchor" href="#问题-传统同步-i-o-的限制"><span>问题：传统同步 I/O 的限制</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">TcpListener</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Read</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 每个连接都需要一个线程</span></span>
<span class="line">    <span class="token keyword">for</span> stream <span class="token keyword">in</span> listener<span class="token punctuation">.</span><span class="token function">incoming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token keyword">mut</span> stream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 阻塞！</span></span>
<span class="line">            stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">b&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题</strong>：</p><ul><li>❌ 每个连接需要一个线程（10万连接 = 10万线程）</li><li>❌ 线程创建和切换有开销</li><li>❌ 内存消耗大（每个线程 ~2MB 栈空间）</li><li>❌ 大部分时间线程在等待 I/O</li></ul><h3 id="解决方案-tokio-异步模型" tabindex="-1"><a class="header-anchor" href="#解决方案-tokio-异步模型"><span>解决方案：Tokio 异步模型</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">TcpListener</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">AsyncReadExt</span><span class="token punctuation">,</span> <span class="token class-name">AsyncWriteExt</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">loop</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token keyword">mut</span> socket<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 每个连接是一个轻量级任务，不是线程！</span></span>
<span class="line">        <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            socket<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 不阻塞！</span></span>
<span class="line">            socket<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token string">b&quot;HTTP/1.1 200 OK\\r\\n\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优势</strong>：</p><ul><li>✅ 一个线程可以处理成千上万的连接</li><li>✅ 任务切换开销极低</li><li>✅ 内存消耗小</li><li>✅ 高并发性能优秀</li></ul><h2 id="tokio-的核心组件" tabindex="-1"><a class="header-anchor" href="#tokio-的核心组件"><span>Tokio 的核心组件</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">┌─────────────────────────────────────┐</span>
<span class="line">│         Tokio Runtime               │</span>
<span class="line">│  ┌──────────────────────────────┐   │</span>
<span class="line">│  │    任务调度器 (Scheduler)    │   │</span>
<span class="line">│  └──────────────────────────────┘   │</span>
<span class="line">│  ┌──────────────────────────────┐   │</span>
<span class="line">│  │   线程池 (Thread Pool)       │   │</span>
<span class="line">│  └──────────────────────────────┘   │</span>
<span class="line">│  ┌──────────────────────────────┐   │</span>
<span class="line">│  │   I/O 驱动 (Reactor)         │   │</span>
<span class="line">│  └──────────────────────────────┘   │</span>
<span class="line">│  ┌──────────────────────────────┐   │</span>
<span class="line">│  │   定时器 (Timer)             │   │</span>
<span class="line">│  └──────────────────────────────┘   │</span>
<span class="line">└─────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-runtime-运行时" tabindex="-1"><a class="header-anchor" href="#_1-runtime-运行时"><span>1. Runtime（运行时）</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 方式1: 使用宏自动创建运行时</span></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from Tokio!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式2: 手动创建运行时</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> runtime <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span>runtime<span class="token punctuation">::</span></span><span class="token class-name">Runtime</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    runtime<span class="token punctuation">.</span><span class="token function">block_on</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from Tokio!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式3: 多线程运行时</span></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main(flavor = <span class="token string">&quot;multi_thread&quot;</span>, worker_threads = 4)]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用 4 个工作线程</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-task-任务" tabindex="-1"><a class="header-anchor" href="#_2-task-任务"><span>2. Task（任务）</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span>task<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建并发任务</span></span>
<span class="line">    <span class="token keyword">let</span> task1 <span class="token operator">=</span> <span class="token namespace">task<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;任务 1 开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;任务 1 完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token string">&quot;结果1&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> task2 <span class="token operator">=</span> <span class="token namespace">task<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;任务 2 开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;任务 2 完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token string">&quot;结果2&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 等待任务完成</span></span>
<span class="line">    <span class="token keyword">let</span> result1 <span class="token operator">=</span> task1<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> result2 <span class="token operator">=</span> task2<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;结果: {}, {}&quot;</span><span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-async-await-语法" tabindex="-1"><a class="header-anchor" href="#_3-async-await-语法"><span>3. async/await 语法</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// async 函数返回 Future</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">fetch_url</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>  <span class="token comment">// await 等待异步操作</span></span>
<span class="line">    <span class="token keyword">let</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">match</span> <span class="token function">fetch_url</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Ok</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;响应: {}&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装和设置" tabindex="-1"><a class="header-anchor" href="#安装和设置"><span>安装和设置</span></a></h2><h3 id="cargo-toml-配置" tabindex="-1"><a class="header-anchor" href="#cargo-toml-配置"><span>Cargo.toml 配置</span></a></h3><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">tokio</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.35&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;full&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 或者只选择需要的功能</span></span>
<span class="line"><span class="token key property">tokio</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.35&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;rt-multi-thread&quot;</span><span class="token punctuation">,</span>  <span class="token comment"># 多线程运行时</span></span>
<span class="line">    <span class="token string">&quot;macros&quot;</span><span class="token punctuation">,</span>           <span class="token comment"># #[tokio::main] 宏</span></span>
<span class="line">    <span class="token string">&quot;net&quot;</span><span class="token punctuation">,</span>              <span class="token comment"># 网络 I/O</span></span>
<span class="line">    <span class="token string">&quot;io-util&quot;</span><span class="token punctuation">,</span>          <span class="token comment"># I/O 工具</span></span>
<span class="line">    <span class="token string">&quot;time&quot;</span><span class="token punctuation">,</span>             <span class="token comment"># 定时器</span></span>
<span class="line">    <span class="token string">&quot;fs&quot;</span><span class="token punctuation">,</span>               <span class="token comment"># 文件系统</span></span>
<span class="line">    <span class="token string">&quot;sync&quot;</span><span class="token punctuation">,</span>             <span class="token comment"># 同步原语</span></span>
<span class="line"><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hello-tokio" tabindex="-1"><a class="header-anchor" href="#hello-tokio"><span>Hello Tokio</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// main.rs</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token punctuation">{</span>sleep<span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;1 秒后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">cargo</span> run</span>
<span class="line"><span class="token comment"># 输出:</span></span>
<span class="line"><span class="token comment"># 开始</span></span>
<span class="line"><span class="token comment"># (等待 1 秒)</span></span>
<span class="line"><span class="token comment"># 1 秒后</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tokio-特性对比" tabindex="-1"><a class="header-anchor" href="#tokio-特性对比"><span>Tokio 特性对比</span></a></h2><h3 id="单线程-vs-多线程运行时" tabindex="-1"><a class="header-anchor" href="#单线程-vs-多线程运行时"><span>单线程 vs 多线程运行时</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 单线程 - 适合简单应用</span></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main(flavor = <span class="token string">&quot;current_thread&quot;</span>)]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 所有任务在一个线程上运行</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 多线程 - 适合 CPU 密集型 + I/O 密集型</span></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main(flavor = <span class="token string">&quot;multi_thread&quot;</span>)]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 任务可以在多个线程上并行运行</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务优先级" tabindex="-1"><a class="header-anchor" href="#任务优先级"><span>任务优先级</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 普通任务</span></span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;普通任务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 阻塞任务（CPU 密集型）- 在专门的线程池中运行</span></span>
<span class="line">    <span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token function">spawn_blocking</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// CPU 密集型操作</span></span>
<span class="line">        <span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1_000_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;计算结果: {}&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tokio-vs-其他方案" tabindex="-1"><a class="header-anchor" href="#tokio-vs-其他方案"><span>Tokio vs 其他方案</span></a></h2><table><thead><tr><th>方案</th><th>并发模型</th><th>性能</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>线程</strong></td><td>一个连接一个线程</td><td>差</td><td>少量连接</td></tr><tr><td><strong>Tokio</strong></td><td>多路复用</td><td>优秀</td><td>高并发 I/O</td></tr><tr><td><strong>Rayon</strong></td><td>数据并行</td><td>优秀</td><td>CPU 密集型</td></tr><tr><td><strong>async-std</strong></td><td>多路复用</td><td>良好</td><td>类似 Tokio</td></tr></tbody></table><h3 id="性能对比" tabindex="-1"><a class="header-anchor" href="#性能对比"><span>性能对比</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 场景：处理 10,000 个并发请求</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 线程方案</span></span>
<span class="line"><span class="token comment">// - 内存: ~20GB (10,000 线程 × 2MB)</span></span>
<span class="line"><span class="token comment">// - 上下文切换: 高开销</span></span>
<span class="line"><span class="token comment">// ❌ 不可行</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Tokio 方案</span></span>
<span class="line"><span class="token comment">// - 内存: ~几十MB</span></span>
<span class="line"><span class="token comment">// - 任务切换: 低开销</span></span>
<span class="line"><span class="token comment">// ✅ 轻松应对</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="何时使用-tokio" tabindex="-1"><a class="header-anchor" href="#何时使用-tokio"><span>何时使用 Tokio</span></a></h2><h3 id="✅-适合-tokio-的场景" tabindex="-1"><a class="header-anchor" href="#✅-适合-tokio-的场景"><span>✅ 适合 Tokio 的场景</span></a></h3><ol><li><strong>Web 服务器</strong></li></ol><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 处理大量并发 HTTP 请求</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">axum<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Router</span><span class="token punctuation">,</span> <span class="token namespace">routing<span class="token punctuation">::</span></span>get<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token class-name">Router</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span> <span class="token string">&quot;Hello!&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 可以处理上万并发连接</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>数据库连接池</strong></li></ol><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 管理多个数据库连接</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">sqlx<span class="token punctuation">::</span></span><span class="token class-name">PgPool</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> pool <span class="token operator">=</span> <span class="token class-name">PgPool</span><span class="token punctuation">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;postgres://...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 多个请求共享连接池</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>微服务通信</strong></li></ol><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// gRPC、消息队列等</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">tonic<span class="token punctuation">::</span>transport<span class="token punctuation">::</span></span><span class="token class-name">Server</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Server</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">add_service</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>实时应用</strong></li></ol><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// WebSocket、聊天服务器</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio_tungstenite<span class="token punctuation">::</span></span>accept_async<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> ws_stream <span class="token operator">=</span> <span class="token function">accept_async</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 处理实时消息</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="❌-不适合-tokio-的场景" tabindex="-1"><a class="header-anchor" href="#❌-不适合-tokio-的场景"><span>❌ 不适合 Tokio 的场景</span></a></h3><ol><li><strong>CPU 密集型计算</strong></li></ol><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 不好的做法</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">heavy_computation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 这会阻塞整个运行时！</span></span>
<span class="line">    <span class="token keyword">let</span> result<span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1_000_000_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 好的做法：使用 spawn_blocking</span></span>
<span class="line"><span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token function">spawn_blocking</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result<span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1_000_000_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    result</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>简单的命令行工具</strong></li></ol><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 简单的 CLI 不需要异步</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 直接用同步代码即可</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>数据并行处理</strong></li></ol><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 使用 Rayon 更合适</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">rayon<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">par_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tokio-生态系统" tabindex="-1"><a class="header-anchor" href="#tokio-生态系统"><span>Tokio 生态系统</span></a></h2><h3 id="核心库" tabindex="-1"><a class="header-anchor" href="#核心库"><span>核心库</span></a></h3><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">tokio</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.35&quot;</span>              <span class="token comment"># 运行时</span></span>
<span class="line"><span class="token key property">tokio-util</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.7&quot;</span>          <span class="token comment"># 工具库</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="web-框架" tabindex="-1"><a class="header-anchor" href="#web-框架"><span>Web 框架</span></a></h3><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code><span class="line"><span class="token key property">axum</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.7&quot;</span>                <span class="token comment"># 现代、快速</span></span>
<span class="line"><span class="token key property">actix-web</span> <span class="token punctuation">=</span> <span class="token string">&quot;4.4&quot;</span>           <span class="token comment"># 成熟、功能丰富</span></span>
<span class="line"><span class="token key property">warp</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.3&quot;</span>                <span class="token comment"># 函数式风格</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-客户端" tabindex="-1"><a class="header-anchor" href="#http-客户端"><span>HTTP 客户端</span></a></h3><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code><span class="line"><span class="token key property">reqwest</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.11&quot;</span>            <span class="token comment"># 高层 HTTP 客户端</span></span>
<span class="line"><span class="token key property">hyper</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.14&quot;</span>              <span class="token comment"># 底层 HTTP 库</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h3><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code><span class="line"><span class="token key property">sqlx</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.7&quot;</span>                <span class="token comment"># 异步 SQL</span></span>
<span class="line"><span class="token key property">tokio-postgres</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.7&quot;</span>      <span class="token comment"># PostgreSQL</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h3><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code><span class="line"><span class="token key property">lapin</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.3&quot;</span>               <span class="token comment"># RabbitMQ</span></span>
<span class="line"><span class="token key property">rdkafka</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.34&quot;</span>            <span class="token comment"># Kafka</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="学习路径" tabindex="-1"><a class="header-anchor" href="#学习路径"><span>学习路径</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">1. 理解异步概念</span>
<span class="line">   ↓</span>
<span class="line">2. 掌握 async/await 语法</span>
<span class="line">   ↓</span>
<span class="line">3. 学习 Tokio runtime</span>
<span class="line">   ↓</span>
<span class="line">4. 实践任务管理</span>
<span class="line">   ↓</span>
<span class="line">5. 探索异步 I/O</span>
<span class="line">   ↓</span>
<span class="line">6. 构建真实项目</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速开始检查清单" tabindex="-1"><a class="header-anchor" href="#快速开始检查清单"><span>快速开始检查清单</span></a></h2><ul><li>[ ] 安装 Tokio (<code>tokio = { version = &quot;1&quot;, features = [&quot;full&quot;] }</code>)</li><li>[ ] 理解 async/await 语法</li><li>[ ] 学会使用 <code>#[tokio::main]</code></li><li>[ ] 掌握 <code>tokio::spawn</code> 创建任务</li><li>[ ] 了解 <code>.await</code> 的作用</li><li>[ ] 实践异步 I/O（网络、文件）</li><li>[ ] 学习错误处理</li><li>[ ] 探索 Tokio 工具（channels, mutex 等）</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong>Tokio</strong> 是 Rust 异步编程的基石：</p><ol><li><strong>高性能</strong>：一个线程处理数万并发</li><li><strong>易用</strong>：async/await 语法简洁</li><li><strong>生态丰富</strong>：大量异步库支持</li><li><strong>生产就绪</strong>：被众多公司使用</li></ol><p><strong>核心思想</strong>：</p><ul><li>不阻塞线程，让 I/O 操作在后台进行</li><li>使用任务（Task）而不是线程（Thread）</li><li>事件驱动，高效利用资源</li></ul><p>接下来我们将深入学习 Tokio 的各个方面！🚀</p><h2 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步"><span>下一步</span></a></h2>`,78)),s("ul",null,[s("li",null,[p(a,{to:"/rust_p/08_async/02_async_basics.html"},{default:t(()=>[...n[0]||(n[0]=[e("异步基础概念",-1)])]),_:1})]),s("li",null,[p(a,{to:"/rust_p/08_async/03_tokio_tasks.html"},{default:t(()=>[...n[1]||(n[1]=[e("Tokio 任务管理",-1)])]),_:1})]),s("li",null,[p(a,{to:"/rust_p/08_async/04_async_io.html"},{default:t(()=>[...n[2]||(n[2]=[e("异步 I/O 操作",-1)])]),_:1})]),s("li",null,[p(a,{to:"/rust_p/08_async/05_projects.html"},{default:t(()=>[...n[3]||(n[3]=[e("实战项目",-1)])]),_:1})])])])}const v=l(r,[["render",k]]),b=JSON.parse('{"path":"/rust_p/08_async/01_tokio_intro.html","title":"Tokio 入门：Rust 异步编程","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"什么是 Tokio","slug":"什么是-tokio","link":"#什么是-tokio","children":[{"level":3,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]}]},{"level":2,"title":"为什么需要 Tokio？","slug":"为什么需要-tokio","link":"#为什么需要-tokio","children":[{"level":3,"title":"问题：传统同步 I/O 的限制","slug":"问题-传统同步-i-o-的限制","link":"#问题-传统同步-i-o-的限制","children":[]},{"level":3,"title":"解决方案：Tokio 异步模型","slug":"解决方案-tokio-异步模型","link":"#解决方案-tokio-异步模型","children":[]}]},{"level":2,"title":"Tokio 的核心组件","slug":"tokio-的核心组件","link":"#tokio-的核心组件","children":[{"level":3,"title":"1. Runtime（运行时）","slug":"_1-runtime-运行时","link":"#_1-runtime-运行时","children":[]},{"level":3,"title":"2. Task（任务）","slug":"_2-task-任务","link":"#_2-task-任务","children":[]},{"level":3,"title":"3. async/await 语法","slug":"_3-async-await-语法","link":"#_3-async-await-语法","children":[]}]},{"level":2,"title":"安装和设置","slug":"安装和设置","link":"#安装和设置","children":[{"level":3,"title":"Cargo.toml 配置","slug":"cargo-toml-配置","link":"#cargo-toml-配置","children":[]},{"level":3,"title":"Hello Tokio","slug":"hello-tokio","link":"#hello-tokio","children":[]}]},{"level":2,"title":"Tokio 特性对比","slug":"tokio-特性对比","link":"#tokio-特性对比","children":[{"level":3,"title":"单线程 vs 多线程运行时","slug":"单线程-vs-多线程运行时","link":"#单线程-vs-多线程运行时","children":[]},{"level":3,"title":"任务优先级","slug":"任务优先级","link":"#任务优先级","children":[]}]},{"level":2,"title":"Tokio vs 其他方案","slug":"tokio-vs-其他方案","link":"#tokio-vs-其他方案","children":[{"level":3,"title":"性能对比","slug":"性能对比","link":"#性能对比","children":[]}]},{"level":2,"title":"何时使用 Tokio","slug":"何时使用-tokio","link":"#何时使用-tokio","children":[{"level":3,"title":"✅ 适合 Tokio 的场景","slug":"✅-适合-tokio-的场景","link":"#✅-适合-tokio-的场景","children":[]},{"level":3,"title":"❌ 不适合 Tokio 的场景","slug":"❌-不适合-tokio-的场景","link":"#❌-不适合-tokio-的场景","children":[]}]},{"level":2,"title":"Tokio 生态系统","slug":"tokio-生态系统","link":"#tokio-生态系统","children":[{"level":3,"title":"核心库","slug":"核心库","link":"#核心库","children":[]},{"level":3,"title":"Web 框架","slug":"web-框架","link":"#web-框架","children":[]},{"level":3,"title":"HTTP 客户端","slug":"http-客户端","link":"#http-客户端","children":[]},{"level":3,"title":"数据库","slug":"数据库","link":"#数据库","children":[]},{"level":3,"title":"消息队列","slug":"消息队列","link":"#消息队列","children":[]}]},{"level":2,"title":"学习路径","slug":"学习路径","link":"#学习路径","children":[]},{"level":2,"title":"快速开始检查清单","slug":"快速开始检查清单","link":"#快速开始检查清单","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"下一步","slug":"下一步","link":"#下一步","children":[]}],"git":{"updatedTime":1761491612000,"contributors":[{"name":"uponup","username":"uponup","email":"1030360567@qq.com","commits":1,"url":"https://github.com/uponup"}],"changelog":[{"hash":"5456040ee4b483f78ba6a68a1887ff67ab3316c6","time":1761491612000,"email":"1030360567@qq.com","author":"uponup","message":"fix rust"}]},"filePathRelative":"rust_p/08_async/01_tokio_intro.md"}');export{v as comp,b as data};
