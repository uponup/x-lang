import{_ as s,c as a,b as p,o as e}from"./app-WzcM213c.js";const t={};function c(l,n){return e(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="rust-声明宏-declarative-macros" tabindex="-1"><a class="header-anchor" href="#rust-声明宏-declarative-macros"><span>Rust 声明宏（Declarative Macros）</span></a></h1><h2 id="什么是声明宏" tabindex="-1"><a class="header-anchor" href="#什么是声明宏"><span>什么是声明宏</span></a></h2><p><strong>声明宏</strong>（Declarative Macros），也叫 <strong>macro_rules! 宏</strong>，是 Rust 中基于模式匹配的宏系统。它通过匹配代码模式来生成代码。</p><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> 宏名称 <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>模式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        生成的代码<span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">(</span>模式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        生成的代码<span class="token number">2</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 可以有多个分支...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="简单例子" tabindex="-1"><a class="header-anchor" href="#简单例子"><span>简单例子</span></a></h2><h3 id="例子-1-无参数宏" tabindex="-1"><a class="header-anchor" href="#例子-1-无参数宏"><span>例子 1：无参数宏</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> say_hello <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;你好，世界！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">say_hello!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: 你好，世界！</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子-2-带参数的宏" tabindex="-1"><a class="header-anchor" href="#例子-2-带参数的宏"><span>例子 2：带参数的宏</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> greet <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;你好, {}!&quot;</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">greet!</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 你好, Alice!</span></span>
<span class="line">    <span class="token macro property">greet!</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 你好, Bob!</span></span>
<span class="line">    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">greet!</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 你好, Charlie!</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子-3-多个参数" tabindex="-1"><a class="header-anchor" href="#例子-3-多个参数"><span>例子 3：多个参数</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> create_point <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$y</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token variable">$x</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token variable">$y</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token macro property">create_point!</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token macro property">create_point!</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;p1: ({}, {})&quot;</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模式匹配标识符" tabindex="-1"><a class="header-anchor" href="#模式匹配标识符"><span>模式匹配标识符</span></a></h2><table><thead><tr><th>标识符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>expr</code></td><td>表达式</td><td><code>1 + 2</code>, <code>foo()</code>, <code>x</code></td></tr><tr><td><code>ident</code></td><td>标识符</td><td>变量名、函数名、类型名</td></tr><tr><td><code>ty</code></td><td>类型</td><td><code>i32</code>, <code>String</code>, <code>Vec&lt;T&gt;</code></td></tr><tr><td><code>path</code></td><td>路径</td><td><code>std::io::Error</code></td></tr><tr><td><code>pat</code></td><td>模式</td><td><code>Some(x)</code>, <code>_</code>, <code>0..=10</code></td></tr><tr><td><code>stmt</code></td><td>语句</td><td><code>let x = 5;</code></td></tr><tr><td><code>block</code></td><td>代码块</td><td><code>{ ... }</code></td></tr><tr><td><code>item</code></td><td>项</td><td>函数、结构体、trait 等</td></tr><tr><td><code>meta</code></td><td>元数据</td><td><code>#[derive(Debug)]</code></td></tr><tr><td><code>tt</code></td><td>单个语法树</td><td>任何单个 token</td></tr><tr><td><code>literal</code></td><td>字面量</td><td><code>42</code>, <code>&quot;hello&quot;</code>, <code>true</code></td></tr></tbody></table><h3 id="使用不同标识符的例子" tabindex="-1"><a class="header-anchor" href="#使用不同标识符的例子"><span>使用不同标识符的例子</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// expr - 表达式</span></span>
<span class="line"><span class="token macro property">macro_rules!</span> add <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ident - 标识符（如函数名）</span></span>
<span class="line"><span class="token macro property">macro_rules!</span> create_function <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$func_name</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ident</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">fn</span> <span class="token variable">$func_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;函数 {} 被调用了&quot;</span><span class="token punctuation">,</span> <span class="token macro property">stringify!</span><span class="token punctuation">(</span><span class="token variable">$func_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ty - 类型</span></span>
<span class="line"><span class="token macro property">macro_rules!</span> create_struct <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ident</span><span class="token punctuation">,</span> <span class="token variable">$field_type</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ty</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token variable">$name</span> <span class="token punctuation">{</span></span>
<span class="line">            value<span class="token punctuation">:</span> <span class="token variable">$field_type</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用 add 宏</span></span>
<span class="line">    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token macro property">add!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;sum: {}&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 使用 create_function 宏</span></span>
<span class="line">    <span class="token macro property">create_function!</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 使用 create_struct 宏</span></span>
<span class="line">    <span class="token macro property">create_struct!</span><span class="token punctuation">(</span><span class="token class-name">Container</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重复模式" tabindex="-1"><a class="header-anchor" href="#重复模式"><span>重复模式</span></a></h2><p>使用 <code>$(...)*</code> 或 <code>$(...)+ </code> 处理可变数量的参数。</p><h3 id="零次或多次" tabindex="-1"><a class="header-anchor" href="#零次或多次"><span>零次或多次 <code>$(...)*</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 标准库的 vec! 宏简化版</span></span>
<span class="line"><span class="token macro property">macro_rules!</span> my_vec <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span> $<span class="token punctuation">(</span> <span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token keyword">mut</span> temp_vec <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            $<span class="token punctuation">(</span></span>
<span class="line">                temp_vec<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token operator">*</span></span>
<span class="line">            temp_vec</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">my_vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> v2 <span class="token operator">=</span> <span class="token macro property">my_vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 空向量也可以</span></span>
<span class="line">    <span class="token keyword">let</span> v3 <span class="token operator">=</span> <span class="token macro property">my_vec!</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3, 4, 5]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一次或多次" tabindex="-1"><a class="header-anchor" href="#一次或多次"><span>一次或多次 <code>$(...)+</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> print_all <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span> $<span class="token punctuation">(</span> <span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        $<span class="token punctuation">(</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token operator">+</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">print_all!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 输出:</span></span>
<span class="line">    <span class="token comment">// 1</span></span>
<span class="line">    <span class="token comment">// 2</span></span>
<span class="line">    <span class="token comment">// 3</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// print_all!();  // 错误！至少需要一个参数</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多分支模式" tabindex="-1"><a class="header-anchor" href="#多分支模式"><span>多分支模式</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> calculate <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 加法</span></span>
<span class="line">    <span class="token punctuation">(</span>add <span class="token variable">$a</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 减法</span></span>
<span class="line">    <span class="token punctuation">(</span>sub <span class="token variable">$a</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$a</span> <span class="token operator">-</span> <span class="token variable">$b</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 乘法</span></span>
<span class="line">    <span class="token punctuation">(</span>mul <span class="token variable">$a</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$a</span> <span class="token operator">*</span> <span class="token variable">$b</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 除法</span></span>
<span class="line">    <span class="token punctuation">(</span>div <span class="token variable">$a</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$a</span> <span class="token operator">/</span> <span class="token variable">$b</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;10 + 5 = {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">calculate!</span><span class="token punctuation">(</span>add <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 15</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;10 - 5 = {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">calculate!</span><span class="token punctuation">(</span>sub <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 5</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;10 * 5 = {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">calculate!</span><span class="token punctuation">(</span>mul <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 50</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;10 / 5 = {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">calculate!</span><span class="token punctuation">(</span>div <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实用宏例子" tabindex="-1"><a class="header-anchor" href="#实用宏例子"><span>实用宏例子</span></a></h2><h3 id="_1-hashmap-字面量" tabindex="-1"><a class="header-anchor" href="#_1-hashmap-字面量"><span>1. HashMap 字面量</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> hashmap <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span> $<span class="token punctuation">(</span> <span class="token variable">$key</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span> <span class="token operator">=&gt;</span> <span class="token variable">$val</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            $<span class="token punctuation">(</span></span>
<span class="line">                map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token operator">*</span></span>
<span class="line">            map</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token macro property">hashmap!</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;name&quot;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;age&quot;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;30&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;city&quot;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Beijing&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-测试用例生成器" tabindex="-1"><a class="header-anchor" href="#_2-测试用例生成器"><span>2. 测试用例生成器</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> test_case <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ident</span><span class="token punctuation">:</span> <span class="token variable">$input</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span> <span class="token operator">=&gt;</span> <span class="token variable">$expected</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token attribute attr-name">#[test]</span></span>
<span class="line">        <span class="token keyword">fn</span> <span class="token variable">$name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$expected</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">double</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span></span>
<span class="line">    x <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 生成多个测试</span></span>
<span class="line"><span class="token macro property">test_case!</span><span class="token punctuation">(</span>test_zero<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property">test_case!</span><span class="token punctuation">(</span>test_positive<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">=&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property">test_case!</span><span class="token punctuation">(</span>test_negative<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-条件日志宏" tabindex="-1"><a class="header-anchor" href="#_3-条件日志宏"><span>3. 条件日志宏</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> log_debug <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">tt</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token attribute attr-name">#[cfg(debug_assertions)]</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;[DEBUG] {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property">macro_rules!</span> log_info <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">tt</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;[INFO] {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">log_debug!</span><span class="token punctuation">(</span><span class="token string">&quot;这只在调试模式下显示: {}&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">log_info!</span><span class="token punctuation">(</span><span class="token string">&quot;这总是显示: {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-批量实现-trait" tabindex="-1"><a class="header-anchor" href="#_4-批量实现-trait"><span>4. 批量实现 trait</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">trait</span> <span class="token type-definition class-name">Describe</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">describe</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property">macro_rules!</span> impl_describe <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ty</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        $<span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">impl</span> <span class="token class-name">Describe</span> <span class="token keyword">for</span> <span class="token variable">$t</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">fn</span> <span class="token function-definition function">describe</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{} 类型的值: {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">stringify!</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token operator">*</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 为多个类型实现 Describe</span></span>
<span class="line"><span class="token macro property">impl_describe!</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// i32 类型的值: 42</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// f64 类型的值: 3.14</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-枚举变体生成器" tabindex="-1"><a class="header-anchor" href="#_5-枚举变体生成器"><span>5. 枚举变体生成器</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> create_enum <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ident</span> <span class="token punctuation">{</span> $<span class="token punctuation">(</span><span class="token variable">$variant</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ident</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">enum</span> <span class="token variable">$name</span> <span class="token punctuation">{</span></span>
<span class="line">            $<span class="token punctuation">(</span><span class="token variable">$variant</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">impl</span> <span class="token variable">$name</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">fn</span> <span class="token function-definition function">variants</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token macro property">vec!</span><span class="token punctuation">[</span>$<span class="token punctuation">(</span><span class="token macro property">stringify!</span><span class="token punctuation">(</span><span class="token variable">$variant</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">]</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property">create_enum!</span><span class="token punctuation">(</span><span class="token class-name">Color</span> <span class="token punctuation">{</span> <span class="token class-name">Red</span><span class="token punctuation">,</span> <span class="token class-name">Green</span><span class="token punctuation">,</span> <span class="token class-name">Blue</span><span class="token punctuation">,</span> <span class="token class-name">Yellow</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">::</span><span class="token function">variants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;颜色: {:?}&quot;</span><span class="token punctuation">,</span> colors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 输出: 颜色: [&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Yellow&quot;]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级技巧" tabindex="-1"><a class="header-anchor" href="#高级技巧"><span>高级技巧</span></a></h2><h3 id="_1-递归宏" tabindex="-1"><a class="header-anchor" href="#_1-递归宏"><span>1. 递归宏</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> count <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> $<span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token number">1</span> <span class="token operator">+</span> <span class="token macro property">count!</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;数量: {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">count!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-tt-muncher-模式-逐个处理-token" tabindex="-1"><a class="header-anchor" href="#_2-tt-muncher-模式-逐个处理-token"><span>2. TT Muncher 模式（逐个处理 token）</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> process <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 终止条件</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;处理完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 处理一个元素，然后递归</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> $<span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;处理: {}&quot;</span><span class="token punctuation">,</span> <span class="token variable">$first</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">process!</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 单个元素</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;最后一个: {}&quot;</span><span class="token punctuation">,</span> <span class="token variable">$first</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">process!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-宏中的宏" tabindex="-1"><a class="header-anchor" href="#_3-宏中的宏"><span>3. 宏中的宏</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> create_macro <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$macro_name</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ident</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">macro_rules!</span> <span class="token variable">$macro_name</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;来自 {}: {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">stringify!</span><span class="token punctuation">(</span><span class="token variable">$macro_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property">create_macro!</span><span class="token punctuation">(</span>my_print<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property">create_macro!</span><span class="token punctuation">(</span>my_debug<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">my_print!</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 来自 my_print: 42</span></span>
<span class="line">    <span class="token macro property">my_debug!</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 来自 my_debug: hello</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置辅助宏" tabindex="-1"><a class="header-anchor" href="#内置辅助宏"><span>内置辅助宏</span></a></h2><h3 id="stringify-转换为字符串" tabindex="-1"><a class="header-anchor" href="#stringify-转换为字符串"><span><code>stringify!</code> - 转换为字符串</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> show_type <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">ty</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;类型: {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">stringify!</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">show_type!</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 类型: i32</span></span>
<span class="line">    <span class="token macro property">show_type!</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 类型: Vec&lt;String&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="concat-连接字符串" tabindex="-1"><a class="header-anchor" href="#concat-连接字符串"><span><code>concat!</code> - 连接字符串</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token macro property">concat!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello World!</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="include-str-包含文件内容" tabindex="-1"><a class="header-anchor" href="#include-str-包含文件内容"><span><code>include_str!</code> - 包含文件内容</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token macro property">include_str!</span><span class="token punctuation">(</span><span class="token string">&quot;../Cargo.toml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Cargo.toml 内容:\\n{}&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="env-获取环境变量" tabindex="-1"><a class="header-anchor" href="#env-获取环境变量"><span><code>env!</code> - 获取环境变量</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> cargo_version <span class="token operator">=</span> <span class="token macro property">env!</span><span class="token punctuation">(</span><span class="token string">&quot;CARGO_PKG_VERSION&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;版本: {}&quot;</span><span class="token punctuation">,</span> cargo_version<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准库中的声明宏" tabindex="-1"><a class="header-anchor" href="#标准库中的声明宏"><span>标准库中的声明宏</span></a></h2><h3 id="_1-vec" tabindex="-1"><a class="header-anchor" href="#_1-vec"><span>1. <code>vec!</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> v2 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// [0, 0, 0, 0, 0]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-println-format" tabindex="-1"><a class="header-anchor" href="#_2-println-format"><span>2. <code>println!</code> / <code>format!</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, {}!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;x = {}, y = {}&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-panic" tabindex="-1"><a class="header-anchor" href="#_3-panic"><span>3. <code>panic!</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;出错了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;错误: {}&quot;</span><span class="token punctuation">,</span> error_message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-assert-assert-eq" tabindex="-1"><a class="header-anchor" href="#_4-assert-assert-eq"><span>4. <code>assert!</code> / <code>assert_eq!</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">assert!</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-matches" tabindex="-1"><a class="header-anchor" href="#_5-matches"><span>5. <code>matches!</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token macro property">matches!</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;值大于 10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-dbg" tabindex="-1"><a class="header-anchor" href="#_6-dbg"><span>6. <code>dbg!</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token macro property">dbg!</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印并返回值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-todo-unimplemented" tabindex="-1"><a class="header-anchor" href="#_7-todo-unimplemented"><span>7. <code>todo!</code> / <code>unimplemented!</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">future_feature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">todo!</span><span class="token punctuation">(</span><span class="token string">&quot;稍后实现&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">not_implemented</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">unimplemented!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调试宏" tabindex="-1"><a class="header-anchor" href="#调试宏"><span>调试宏</span></a></h2><h3 id="使用-cargo-expand" tabindex="-1"><a class="header-anchor" href="#使用-cargo-expand"><span>使用 <code>cargo expand</code></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 安装</span></span>
<span class="line"><span class="token function">cargo</span> <span class="token function">install</span> cargo-expand</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看宏展开</span></span>
<span class="line"><span class="token function">cargo</span> <span class="token function">expand</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看特定函数</span></span>
<span class="line"><span class="token function">cargo</span> <span class="token function">expand</span> module::function</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在宏中打印调试信息" tabindex="-1"><a class="header-anchor" href="#在宏中打印调试信息"><span>在宏中打印调试信息</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token macro property">macro_rules!</span> debug_macro <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;宏输入: {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">stringify!</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token variable">$x</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><h3 id="✅-好的做法" tabindex="-1"><a class="header-anchor" href="#✅-好的做法"><span>✅ 好的做法</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 1. 使用括号包裹展开的代码，避免优先级问题</span></span>
<span class="line"><span class="token macro property">macro_rules!</span> add <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">)</span>  <span class="token comment">// 注意括号</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 提供清晰的文档</span></span>
<span class="line"><span class="token comment">/// 创建一个包含指定元素的向量</span></span>
<span class="line"><span class="token comment">/// </span></span>
<span class="line"><span class="token comment">/// # 例子</span></span>
<span class="line"><span class="token comment">/// \`\`\`</span></span>
<span class="line"><span class="token comment">/// let v = my_vec![1, 2, 3];</span></span>
<span class="line"><span class="token comment">/// \`\`\`</span></span>
<span class="line"><span class="token macro property">macro_rules!</span> my_vec <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 支持多种调用方式</span></span>
<span class="line"><span class="token macro property">macro_rules!</span> flexible <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$y</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="❌-避免的做法" tabindex="-1"><a class="header-anchor" href="#❌-避免的做法"><span>❌ 避免的做法</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 1. 避免过于复杂的宏</span></span>
<span class="line"><span class="token comment">// 如果宏太复杂，考虑使用函数或过程宏</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 避免不必要的宏</span></span>
<span class="line"><span class="token comment">// 简单的情况用函数就好</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, {}!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 避免宏名称冲突</span></span>
<span class="line"><span class="token comment">// 不要用太通用的名称</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="声明宏-vs-过程宏" tabindex="-1"><a class="header-anchor" href="#声明宏-vs-过程宏"><span>声明宏 vs 过程宏</span></a></h2><table><thead><tr><th>特性</th><th>声明宏</th><th>过程宏</th></tr></thead><tbody><tr><td><strong>定义</strong></td><td><code>macro_rules!</code></td><td>Rust 函数</td></tr><tr><td><strong>复杂度</strong></td><td>简单</td><td>复杂</td></tr><tr><td><strong>功能</strong></td><td>模式匹配</td><td>完全控制</td></tr><tr><td><strong>编译速度</strong></td><td>快</td><td>慢</td></tr><tr><td><strong>依赖</strong></td><td>无</td><td>需要 <code>syn</code>, <code>quote</code></td></tr><tr><td><strong>使用场景</strong></td><td>简单代码生成</td><td>复杂代码生成</td></tr></tbody></table><h2 id="何时使用声明宏" tabindex="-1"><a class="header-anchor" href="#何时使用声明宏"><span>何时使用声明宏</span></a></h2><p>✅ <strong>适合使用的场景</strong>：</p><ul><li>简单的代码重复</li><li>创建 DSL（领域特定语言）</li><li>编译时计算</li><li>创建类型安全的 API</li><li>减少样板代码</li></ul><p>❌ <strong>不适合的场景</strong>：</p><ul><li>需要分析类型信息</li><li>需要复杂的代码生成</li><li>需要更好的错误信息</li><li>公共 API（考虑过程宏）</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong>声明宏</strong>是 Rust 中基于模式匹配的宏系统：</p><ol><li><strong>语法</strong>：<code>macro_rules! 名称 { 模式 =&gt; 展开 }</code></li><li><strong>核心</strong>：模式匹配和代码替换</li><li><strong>优点</strong>：简单、快速、无额外依赖</li><li><strong>用途</strong>：减少重复代码、创建 DSL</li></ol><p>与过程宏相比，声明宏更简单但功能有限。对于大多数简单场景，声明宏已经足够！🦀</p><h2 id="参考资源" tabindex="-1"><a class="header-anchor" href="#参考资源"><span>参考资源</span></a></h2><ul><li><a href="https://doc.rust-lang.org/book/ch19-06-macros.html" target="_blank" rel="noopener noreferrer">The Rust Book - Macros</a></li><li><a href="https://veykril.github.io/tlborm/" target="_blank" rel="noopener noreferrer">The Little Book of Rust Macros</a></li><li><a href="https://doc.rust-lang.org/rust-by-example/macros.html" target="_blank" rel="noopener noreferrer">Rust by Example - Macros</a></li></ul>`,89)])])}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/rust_p/06_others/02_%E5%A3%B0%E6%98%8E%E5%AE%8F.html","title":"Rust 声明宏（Declarative Macros）","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"什么是声明宏","slug":"什么是声明宏","link":"#什么是声明宏","children":[]},{"level":2,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":2,"title":"简单例子","slug":"简单例子","link":"#简单例子","children":[{"level":3,"title":"例子 1：无参数宏","slug":"例子-1-无参数宏","link":"#例子-1-无参数宏","children":[]},{"level":3,"title":"例子 2：带参数的宏","slug":"例子-2-带参数的宏","link":"#例子-2-带参数的宏","children":[]},{"level":3,"title":"例子 3：多个参数","slug":"例子-3-多个参数","link":"#例子-3-多个参数","children":[]}]},{"level":2,"title":"模式匹配标识符","slug":"模式匹配标识符","link":"#模式匹配标识符","children":[{"level":3,"title":"使用不同标识符的例子","slug":"使用不同标识符的例子","link":"#使用不同标识符的例子","children":[]}]},{"level":2,"title":"重复模式","slug":"重复模式","link":"#重复模式","children":[{"level":3,"title":"零次或多次 $(...)*","slug":"零次或多次","link":"#零次或多次","children":[]},{"level":3,"title":"一次或多次 $(...)+","slug":"一次或多次","link":"#一次或多次","children":[]}]},{"level":2,"title":"多分支模式","slug":"多分支模式","link":"#多分支模式","children":[]},{"level":2,"title":"实用宏例子","slug":"实用宏例子","link":"#实用宏例子","children":[{"level":3,"title":"1. HashMap 字面量","slug":"_1-hashmap-字面量","link":"#_1-hashmap-字面量","children":[]},{"level":3,"title":"2. 测试用例生成器","slug":"_2-测试用例生成器","link":"#_2-测试用例生成器","children":[]},{"level":3,"title":"3. 条件日志宏","slug":"_3-条件日志宏","link":"#_3-条件日志宏","children":[]},{"level":3,"title":"4. 批量实现 trait","slug":"_4-批量实现-trait","link":"#_4-批量实现-trait","children":[]},{"level":3,"title":"5. 枚举变体生成器","slug":"_5-枚举变体生成器","link":"#_5-枚举变体生成器","children":[]}]},{"level":2,"title":"高级技巧","slug":"高级技巧","link":"#高级技巧","children":[{"level":3,"title":"1. 递归宏","slug":"_1-递归宏","link":"#_1-递归宏","children":[]},{"level":3,"title":"2. TT Muncher 模式（逐个处理 token）","slug":"_2-tt-muncher-模式-逐个处理-token","link":"#_2-tt-muncher-模式-逐个处理-token","children":[]},{"level":3,"title":"3. 宏中的宏","slug":"_3-宏中的宏","link":"#_3-宏中的宏","children":[]}]},{"level":2,"title":"内置辅助宏","slug":"内置辅助宏","link":"#内置辅助宏","children":[{"level":3,"title":"stringify! - 转换为字符串","slug":"stringify-转换为字符串","link":"#stringify-转换为字符串","children":[]},{"level":3,"title":"concat! - 连接字符串","slug":"concat-连接字符串","link":"#concat-连接字符串","children":[]},{"level":3,"title":"include_str! - 包含文件内容","slug":"include-str-包含文件内容","link":"#include-str-包含文件内容","children":[]},{"level":3,"title":"env! - 获取环境变量","slug":"env-获取环境变量","link":"#env-获取环境变量","children":[]}]},{"level":2,"title":"标准库中的声明宏","slug":"标准库中的声明宏","link":"#标准库中的声明宏","children":[{"level":3,"title":"1. vec!","slug":"_1-vec","link":"#_1-vec","children":[]},{"level":3,"title":"2. println! / format!","slug":"_2-println-format","link":"#_2-println-format","children":[]},{"level":3,"title":"3. panic!","slug":"_3-panic","link":"#_3-panic","children":[]},{"level":3,"title":"4. assert! / assert_eq!","slug":"_4-assert-assert-eq","link":"#_4-assert-assert-eq","children":[]},{"level":3,"title":"5. matches!","slug":"_5-matches","link":"#_5-matches","children":[]},{"level":3,"title":"6. dbg!","slug":"_6-dbg","link":"#_6-dbg","children":[]},{"level":3,"title":"7. todo! / unimplemented!","slug":"_7-todo-unimplemented","link":"#_7-todo-unimplemented","children":[]}]},{"level":2,"title":"调试宏","slug":"调试宏","link":"#调试宏","children":[{"level":3,"title":"使用 cargo expand","slug":"使用-cargo-expand","link":"#使用-cargo-expand","children":[]},{"level":3,"title":"在宏中打印调试信息","slug":"在宏中打印调试信息","link":"#在宏中打印调试信息","children":[]}]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[{"level":3,"title":"✅ 好的做法","slug":"✅-好的做法","link":"#✅-好的做法","children":[]},{"level":3,"title":"❌ 避免的做法","slug":"❌-避免的做法","link":"#❌-避免的做法","children":[]}]},{"level":2,"title":"声明宏 vs 过程宏","slug":"声明宏-vs-过程宏","link":"#声明宏-vs-过程宏","children":[]},{"level":2,"title":"何时使用声明宏","slug":"何时使用声明宏","link":"#何时使用声明宏","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资源","slug":"参考资源","link":"#参考资源","children":[]}],"git":{"updatedTime":1761491612000,"contributors":[{"name":"uponup","username":"uponup","email":"1030360567@qq.com","commits":1,"url":"https://github.com/uponup"}],"changelog":[{"hash":"5456040ee4b483f78ba6a68a1887ff67ab3316c6","time":1761491612000,"email":"1030360567@qq.com","author":"uponup","message":"fix rust"}]},"filePathRelative":"rust_p/06_others/02_声明宏.md"}');export{i as comp,u as data};
