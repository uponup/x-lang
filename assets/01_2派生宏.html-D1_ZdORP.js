import{_ as s,c as a,b as e,o as p}from"./app-WzcM213c.js";const t={};function l(c,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="rust-派生宏-derive-macros" tabindex="-1"><a class="header-anchor" href="#rust-派生宏-derive-macros"><span>Rust 派生宏（Derive Macros）</span></a></h1><h2 id="什么是rust派生宏-derive-macros" tabindex="-1"><a class="header-anchor" href="#什么是rust派生宏-derive-macros"><span>什么是Rust派生宏（Derive Macros）</span></a></h2><p><strong>派生宏</strong>（Derive Macros）是Rust中一种特殊的过程宏，它可以为结构体或枚举自动生成代码实现。最常见的用法是通过 <code>#[derive(...)]</code> 属性来自动实现某些trait。</p><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><p>派生宏的作用是：</p><ul><li><strong>自动生成重复性代码</strong>：避免手动编写样板代码</li><li><strong>实现常用trait</strong>：如 <code>Debug</code>、<code>Clone</code>、<code>PartialEq</code> 等</li><li><strong>保证一致性</strong>：自动生成的代码遵循标准实现模式</li></ul><h3 id="常见的标准库派生宏" tabindex="-1"><a class="header-anchor" href="#常见的标准库派生宏"><span>常见的标准库派生宏</span></a></h3><p>以下是最常用的派生宏及其用途：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// Debug - 允许使用 {:?} 格式化打印</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Clone - 允许显式复制值</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Data</span> <span class="token punctuation">{</span></span>
<span class="line">    values<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// PartialEq, Eq - 允许比较相等性</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(PartialEq, Eq)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// PartialOrd, Ord - 允许比较大小</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(PartialOrd, Ord, PartialEq, Eq)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Priority</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Copy - 允许隐式复制（仅适用于简单类型）</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Copy, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Coordinates</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Default - 提供默认值</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Default)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">    timeout<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line">    retries<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="详细例子" tabindex="-1"><a class="header-anchor" href="#详细例子"><span>详细例子</span></a></h3><h4 id="例子-1-基础派生宏使用" tabindex="-1"><a class="header-anchor" href="#例子-1-基础派生宏使用"><span>例子 1：基础派生宏使用</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 组合多个派生宏</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone, PartialEq)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span></span>
<span class="line">    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;alice@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Debug - 打印调试信息</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 输出: User { id: 1, username: &quot;alice&quot;, email: &quot;alice@example.com&quot; }</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Clone - 克隆对象</span></span>
<span class="line">    <span class="token keyword">let</span> user2 <span class="token operator">=</span> user1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// PartialEq - 比较相等性</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Are they equal? {}&quot;</span><span class="token punctuation">,</span> user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子-2-枚举类型的派生" tabindex="-1"><a class="header-anchor" href="#例子-2-枚举类型的派生"><span>例子 2：枚举类型的派生</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone, PartialEq)]</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token type-definition class-name">Status</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Pending</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">InProgress</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Completed</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Failed</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    status<span class="token punctuation">:</span> <span class="token class-name">Status</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">        title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;学习Rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        status<span class="token punctuation">:</span> <span class="token class-name">Status</span><span class="token punctuation">::</span><span class="token class-name">InProgress</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:#?}&quot;</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 输出美化的调试信息</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> task<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token class-name">Status</span><span class="token punctuation">::</span><span class="token class-name">InProgress</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;任务进行中！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子-3-copy-vs-clone" tabindex="-1"><a class="header-anchor" href="#例子-3-copy-vs-clone"><span>例子 3：Copy vs Clone</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// Copy 类型 - 自动复制（栈上的简单类型）</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug, Copy, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Clone 类型 - 需要显式克隆（包含堆数据）</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Circle</span> <span class="token punctuation">{</span></span>
<span class="line">    center<span class="token punctuation">:</span> <span class="token class-name">Point</span><span class="token punctuation">,</span></span>
<span class="line">    radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>  <span class="token comment">// String在堆上，不能Copy</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>  <span class="token comment">// 自动复制（Copy）</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;p1: {:?}, p2: {:?}&quot;</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p1仍然可用</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span></span>
<span class="line">        center<span class="token punctuation">:</span> p1<span class="token punctuation">,</span></span>
<span class="line">        radius<span class="token punctuation">:</span> <span class="token number">5.0</span><span class="token punctuation">,</span></span>
<span class="line">        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Circle1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> c2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 必须显式克隆</span></span>
<span class="line">    <span class="token comment">// let c3 = c1;  // 这会移动c1，之后c1不可用</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子-4-default-派生" tabindex="-1"><a class="header-anchor" href="#例子-4-default-派生"><span>例子 4：Default 派生</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[derive(Debug, Default)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">ServerConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    host<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>        <span class="token comment">// 默认: &quot;&quot;</span></span>
<span class="line">    port<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>          <span class="token comment">// 默认: 0</span></span>
<span class="line">    max_connections<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token comment">// 默认: 0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用默认值</span></span>
<span class="line">    <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">ServerConfig</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 部分覆盖默认值</span></span>
<span class="line">    <span class="token keyword">let</span> custom_config <span class="token operator">=</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span></span>
<span class="line">        port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span></span>
<span class="line">        max_connections<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> custom_config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子-5-排序和比较" tabindex="-1"><a class="header-anchor" href="#例子-5-排序和比较"><span>例子 5：排序和比较</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[derive(Debug, PartialEq, Eq, PartialOrd, Ord)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Student</span> <span class="token punctuation">{</span></span>
<span class="line">    grade<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>      <span class="token comment">// 先按成绩排序</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>   <span class="token comment">// 再按名字排序</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> students <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token class-name">Student</span> <span class="token punctuation">{</span> grade<span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Student</span> <span class="token punctuation">{</span> grade<span class="token punctuation">:</span> <span class="token number">92</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Student</span> <span class="token punctuation">{</span> grade<span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    students<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Ord trait 允许排序</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> student <span class="token keyword">in</span> students <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 输出按grade然后name排序</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用派生宏总结" tabindex="-1"><a class="header-anchor" href="#常用派生宏总结"><span>常用派生宏总结</span></a></h3><table><thead><tr><th>派生宏</th><th>用途</th><th>要求</th></tr></thead><tbody><tr><td><code>Debug</code></td><td>调试输出</td><td>所有字段都需实现Debug</td></tr><tr><td><code>Clone</code></td><td>显式克隆</td><td>所有字段都需实现Clone</td></tr><tr><td><code>Copy</code></td><td>隐式复制</td><td>所有字段都需实现Copy（仅限栈类型）</td></tr><tr><td><code>PartialEq</code></td><td><code>==</code> 和 <code>!=</code> 比较</td><td>所有字段都需实现PartialEq</td></tr><tr><td><code>Eq</code></td><td>完全相等性</td><td>需要先实现PartialEq</td></tr><tr><td><code>PartialOrd</code></td><td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> 比较</td><td>需要先实现PartialEq</td></tr><tr><td><code>Ord</code></td><td>完全排序</td><td>需要先实现PartialOrd和Eq</td></tr><tr><td><code>Default</code></td><td>默认值</td><td>所有字段都需实现Default</td></tr><tr><td><code>Hash</code></td><td>哈希计算</td><td>用于HashMap等集合</td></tr></tbody></table><h3 id="自定义派生宏-高级" tabindex="-1"><a class="header-anchor" href="#自定义派生宏-高级"><span>自定义派生宏（高级）</span></a></h3><p>你也可以创建自己的派生宏。例如，<code>serde</code> 库提供的 <code>Serialize</code> 和 <code>Deserialize</code>：</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Serialize</span><span class="token punctuation">,</span> <span class="token class-name">Deserialize</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Serialize, Deserialize, Debug)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">ApiResponse</span> <span class="token punctuation">{</span></span>
<span class="line">    status<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    data<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这会自动生成JSON序列化/反序列化代码</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="限制和注意事项" tabindex="-1"><a class="header-anchor" href="#限制和注意事项"><span>限制和注意事项</span></a></h3><ol><li><strong>所有字段必须满足trait要求</strong>：如果结构体派生 <code>Clone</code>，所有字段也必须实现 <code>Clone</code></li><li><strong>Copy的限制</strong>：只能用于完全在栈上的类型（不能包含 <code>String</code>、<code>Vec</code> 等）</li><li><strong>派生顺序</strong>：某些派生有依赖关系（如 <code>Ord</code> 需要 <code>Eq</code> 和 <code>PartialOrd</code>）</li></ol><p>希望这些解释和例子能帮助你理解Rust的派生宏！如果你想在你的文档中添加派生宏的章节，或者需要更多特定的例子，请告诉我。</p><h2 id="常用派生宏" tabindex="-1"><a class="header-anchor" href="#常用派生宏"><span>常用派生宏</span></a></h2><table><thead><tr><th>派生宏</th><th>用途</th><th>要求</th></tr></thead><tbody><tr><td><code>Debug</code></td><td>调试输出 <code>{:?}</code></td><td>所有字段都需实现Debug</td></tr><tr><td><code>Clone</code></td><td>显式克隆</td><td>所有字段都需实现Clone</td></tr><tr><td><code>Copy</code></td><td>隐式复制</td><td>所有字段都需实现Copy（仅限栈类型）</td></tr><tr><td><code>PartialEq</code></td><td><code>==</code> 和 <code>!=</code> 比较</td><td>所有字段都需实现PartialEq</td></tr><tr><td><code>Eq</code></td><td>完全相等性</td><td>需要先实现PartialEq</td></tr><tr><td><code>PartialOrd</code></td><td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> 比较</td><td>需要先实现PartialEq</td></tr><tr><td><code>Ord</code></td><td>完全排序</td><td>需要先实现PartialOrd和Eq</td></tr><tr><td><code>Default</code></td><td>默认值</td><td>所有字段都需实现Default</td></tr><tr><td><code>Hash</code></td><td>哈希计算</td><td>用于HashMap等集合</td></tr></tbody></table><h2 id="基础用法" tabindex="-1"><a class="header-anchor" href="#基础用法"><span>基础用法</span></a></h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone, PartialEq)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span></span>
<span class="line">    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;alice@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Debug - 打印调试信息</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Clone - 克隆对象</span></span>
<span class="line">    <span class="token keyword">let</span> user2 <span class="token operator">=</span> user1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// PartialEq - 比较相等性</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;相等吗? {}&quot;</span><span class="token punctuation">,</span> user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="派生宏冲突问题" tabindex="-1"><a class="header-anchor" href="#派生宏冲突问题"><span>派生宏冲突问题</span></a></h2><h3 id="_1-同一trait重复派生" tabindex="-1"><a class="header-anchor" href="#_1-同一trait重复派生"><span>1. 同一trait重复派生</span></a></h3><p><strong>问题</strong>：重复派生同一个trait会导致编译错误</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 错误：重复派生</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span>  <span class="token comment">// 错误！重复派生Debug</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案</strong>：在同一个 <code>#[derive(...)]</code> 中只写一次</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ✅ 正确</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone, PartialEq)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-手动实现与派生冲突" tabindex="-1"><a class="header-anchor" href="#_2-手动实现与派生冲突"><span>2. 手动实现与派生冲突</span></a></h3><p><strong>问题</strong>：已经手动实现的trait不能再派生</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 错误：Debug已手动实现</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span> <span class="token keyword">for</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;Point({}, {})&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// #[derive(Debug)]  // 这会冲突！</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案</strong>：选择手动实现或派生，不能同时使用</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ✅ 方案1：只使用手动实现</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span> <span class="token keyword">for</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;Point({}, {})&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 方案2：只使用派生（其他trait可以派生）</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone, Copy)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point2</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-copy和clone的特殊关系" tabindex="-1"><a class="header-anchor" href="#_3-copy和clone的特殊关系"><span>3. Copy和Clone的特殊关系</span></a></h3><p><strong>规则</strong>：派生 <code>Copy</code> 必须同时派生 <code>Clone</code></p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 错误：Copy需要Clone</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Copy)]</span>  <span class="token comment">// 错误！</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 正确</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Copy, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-ord派生的依赖链" tabindex="-1"><a class="header-anchor" href="#_4-ord派生的依赖链"><span>4. Ord派生的依赖链</span></a></h3><p><strong>规则</strong>：<code>Ord</code> 需要 <code>Eq</code> + <code>PartialOrd</code>，<code>Eq</code> 需要 <code>PartialEq</code></p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 错误：缺少依赖</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Ord)]</span>  <span class="token comment">// 错误！缺少Eq和PartialOrd</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Priority</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 正确：按依赖顺序</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(PartialEq, Eq, PartialOrd, Ord)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Priority</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型不满足派生条件" tabindex="-1"><a class="header-anchor" href="#类型不满足派生条件"><span>类型不满足派生条件</span></a></h2><h3 id="_1-字段类型不支持派生" tabindex="-1"><a class="header-anchor" href="#_1-字段类型不支持派生"><span>1. 字段类型不支持派生</span></a></h3><p><strong>问题</strong>：所有字段必须实现相应的trait</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 错误：函数指针不能Clone</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Handler</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    callback<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>  <span class="token comment">// fn指针不实现Clone</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 编译错误：the trait \`Clone\` is not implemented for \`fn() -&gt; i32\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案A</strong>：移除不支持的派生宏，手动实现</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ✅ 手动实现Clone</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Handler</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    callback<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">Clone</span> <span class="token keyword">for</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Handler</span> <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            callback<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>callback<span class="token punctuation">,</span>  <span class="token comment">// 函数指针可以直接复制</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案B</strong>：改变数据结构设计</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ✅ 使用支持Clone的类型</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Handler</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    callback<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  <span class="token comment">// 使用trait对象</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-copy-trait的严格限制" tabindex="-1"><a class="header-anchor" href="#_2-copy-trait的严格限制"><span>2. Copy trait的严格限制</span></a></h3><p><strong>问题</strong>：包含堆分配数据的类型不能实现Copy</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 错误：String在堆上，不能Copy</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Copy, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>  <span class="token comment">// String不能Copy！</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 编译错误：the trait \`Copy\` is not implemented for \`String\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案A</strong>：移除Copy，只保留Clone</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ✅ 只使用Clone</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案B</strong>：使用栈上的类型</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ✅ 使用固定大小的数组</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Copy, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 固定大小的字节数组</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 使用字符串切片引用</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Copy, Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">PersonRef</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-泛型类型的派生限制" tabindex="-1"><a class="header-anchor" href="#_3-泛型类型的派生限制"><span>3. 泛型类型的派生限制</span></a></h3><p><strong>问题</strong>：泛型参数可能不满足trait约束</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ❌ 可能出错：T可能不实现Debug</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Container</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果T不实现Debug，这会失败</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token type-definition class-name">NoDebug</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token class-name">NoDebug</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 错误！</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案</strong>：添加trait约束</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// ✅ 方案1：在派生时自动添加约束</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Container</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 编译器会自动要求 T: Debug</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 方案2：手动实现，更灵活的约束</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Container</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span><span class="token operator">&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span> <span class="token keyword">for</span> <span class="token class-name">Container</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;Container {{ value: {:?} }}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-部分字段跳过派生" tabindex="-1"><a class="header-anchor" href="#_4-部分字段跳过派生"><span>4. 部分字段跳过派生</span></a></h3><p><strong>问题</strong>：某个字段不支持派生，但其他字段支持</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ❌ Mutex不实现Debug</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">AppState</span> <span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    lock<span class="token punctuation">:</span> <span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  <span class="token comment">// Mutex不实现Debug</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解决方案</strong>：手动实现并跳过问题字段</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 手动实现Debug</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">AppState</span> <span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    lock<span class="token punctuation">:</span> <span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span> <span class="token keyword">for</span> <span class="token class-name">AppState</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span></span>
<span class="line">        f<span class="token punctuation">.</span><span class="token function">debug_struct</span><span class="token punctuation">(</span><span class="token string">&quot;AppState&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token string">&quot;&lt;locked&gt;&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 跳过Mutex</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战例子" tabindex="-1"><a class="header-anchor" href="#实战例子"><span>实战例子</span></a></h2><h3 id="例子1-混合派生和手动实现" tabindex="-1"><a class="header-anchor" href="#例子1-混合派生和手动实现"><span>例子1：混合派生和手动实现</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token attribute attr-name">#[derive(Clone, PartialEq)]</span>  <span class="token comment">// 自动派生</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span></span>
<span class="line">    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    password_hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 手动实现Debug，隐藏敏感信息</span></span>
<span class="line"><span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span> <span class="token keyword">for</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span></span>
<span class="line">        f<span class="token punctuation">.</span><span class="token function">debug_struct</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;password_hash&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token string">&quot;&lt;redacted&gt;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        password_hash<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;secret123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 输出: User { id: 1, username: &quot;alice&quot;, password_hash: &quot;&lt;redacted&gt;&quot; }</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子2-条件编译派生" tabindex="-1"><a class="header-anchor" href="#例子2-条件编译派生"><span>例子2：条件编译派生</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 在调试模式下派生Debug，发布模式下不派生</span></span>
<span class="line"><span class="token attribute attr-name">#[cfg_attr(debug_assertions, derive(Debug))]</span></span>
<span class="line"><span class="token attribute attr-name">#[derive(Clone)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">SensitiveData</span> <span class="token punctuation">{</span></span>
<span class="line">    token<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    secret<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子3-使用第三方派生宏" tabindex="-1"><a class="header-anchor" href="#例子3-使用第三方派生宏"><span>例子3：使用第三方派生宏</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token comment">// 使用serde进行序列化</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Serialize</span><span class="token punctuation">,</span> <span class="token class-name">Deserialize</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Debug, Clone, Serialize, Deserialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">    host<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    port<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token attribute attr-name">#[serde(skip)]</span>  <span class="token comment">// 跳过某个字段</span></span>
<span class="line">    runtime_data<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><ol><li><strong>优先使用派生</strong>：除非需要自定义行为，否则使用派生宏</li><li><strong>注意依赖关系</strong>：<code>Copy</code> 需要 <code>Clone</code>，<code>Ord</code> 需要 <code>Eq</code> + <code>PartialOrd</code></li><li><strong>泛型类型要小心</strong>：确保泛型参数满足trait约束</li><li><strong>混合使用</strong>：可以派生一些trait，手动实现另一些</li><li><strong>敏感数据处理</strong>：手动实现 <code>Debug</code> 来隐藏密码等敏感信息</li><li><strong>性能考虑</strong>：<code>Copy</code> 类型性能更好，但仅限简单类型</li></ol><h2 id="常见错误总结" tabindex="-1"><a class="header-anchor" href="#常见错误总结"><span>常见错误总结</span></a></h2><table><thead><tr><th>错误场景</th><th>原因</th><th>解决方案</th></tr></thead><tbody><tr><td>重复派生</td><td>同一trait派生多次</td><td>合并到一个 <code>#[derive(...)]</code></td></tr><tr><td>手动实现冲突</td><td>trait已手动实现</td><td>移除派生或手动实现</td></tr><tr><td>Copy缺Clone</td><td>Copy需要Clone</td><td>同时派生两者</td></tr><tr><td>String不能Copy</td><td>堆分配类型限制</td><td>只用Clone或改用&amp;str</td></tr><tr><td>泛型不满足</td><td>泛型参数缺trait</td><td>添加trait约束</td></tr><tr><td>Mutex不能Debug</td><td>类型不支持</td><td>手动实现，跳过该字段</td></tr></tbody></table><h2 id="参考资源" tabindex="-1"><a class="header-anchor" href="#参考资源"><span>参考资源</span></a></h2><ul><li><a href="https://doc.rust-lang.org/book/appendix-03-derivable-traits.html" target="_blank" rel="noopener noreferrer">Rust Book - Appendix C: Derivable Traits</a></li><li><a href="https://doc.rust-lang.org/reference/attributes/derive.html" target="_blank" rel="noopener noreferrer">The Rust Reference - Derive</a></li></ul>`,87)])])}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/rust_p/06_others/01_2%E6%B4%BE%E7%94%9F%E5%AE%8F.html","title":"Rust 派生宏（Derive Macros）","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"什么是Rust派生宏（Derive Macros）","slug":"什么是rust派生宏-derive-macros","link":"#什么是rust派生宏-derive-macros","children":[{"level":3,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":3,"title":"常见的标准库派生宏","slug":"常见的标准库派生宏","link":"#常见的标准库派生宏","children":[]},{"level":3,"title":"详细例子","slug":"详细例子","link":"#详细例子","children":[]},{"level":3,"title":"常用派生宏总结","slug":"常用派生宏总结","link":"#常用派生宏总结","children":[]},{"level":3,"title":"自定义派生宏（高级）","slug":"自定义派生宏-高级","link":"#自定义派生宏-高级","children":[]},{"level":3,"title":"限制和注意事项","slug":"限制和注意事项","link":"#限制和注意事项","children":[]}]},{"level":2,"title":"常用派生宏","slug":"常用派生宏","link":"#常用派生宏","children":[]},{"level":2,"title":"基础用法","slug":"基础用法","link":"#基础用法","children":[]},{"level":2,"title":"派生宏冲突问题","slug":"派生宏冲突问题","link":"#派生宏冲突问题","children":[{"level":3,"title":"1. 同一trait重复派生","slug":"_1-同一trait重复派生","link":"#_1-同一trait重复派生","children":[]},{"level":3,"title":"2. 手动实现与派生冲突","slug":"_2-手动实现与派生冲突","link":"#_2-手动实现与派生冲突","children":[]},{"level":3,"title":"3. Copy和Clone的特殊关系","slug":"_3-copy和clone的特殊关系","link":"#_3-copy和clone的特殊关系","children":[]},{"level":3,"title":"4. Ord派生的依赖链","slug":"_4-ord派生的依赖链","link":"#_4-ord派生的依赖链","children":[]}]},{"level":2,"title":"类型不满足派生条件","slug":"类型不满足派生条件","link":"#类型不满足派生条件","children":[{"level":3,"title":"1. 字段类型不支持派生","slug":"_1-字段类型不支持派生","link":"#_1-字段类型不支持派生","children":[]},{"level":3,"title":"2. Copy trait的严格限制","slug":"_2-copy-trait的严格限制","link":"#_2-copy-trait的严格限制","children":[]},{"level":3,"title":"3. 泛型类型的派生限制","slug":"_3-泛型类型的派生限制","link":"#_3-泛型类型的派生限制","children":[]},{"level":3,"title":"4. 部分字段跳过派生","slug":"_4-部分字段跳过派生","link":"#_4-部分字段跳过派生","children":[]}]},{"level":2,"title":"实战例子","slug":"实战例子","link":"#实战例子","children":[{"level":3,"title":"例子1：混合派生和手动实现","slug":"例子1-混合派生和手动实现","link":"#例子1-混合派生和手动实现","children":[]},{"level":3,"title":"例子2：条件编译派生","slug":"例子2-条件编译派生","link":"#例子2-条件编译派生","children":[]},{"level":3,"title":"例子3：使用第三方派生宏","slug":"例子3-使用第三方派生宏","link":"#例子3-使用第三方派生宏","children":[]}]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]},{"level":2,"title":"常见错误总结","slug":"常见错误总结","link":"#常见错误总结","children":[]},{"level":2,"title":"参考资源","slug":"参考资源","link":"#参考资源","children":[]}],"git":{"updatedTime":1761491612000,"contributors":[{"name":"uponup","username":"uponup","email":"1030360567@qq.com","commits":1,"url":"https://github.com/uponup"}],"changelog":[{"hash":"5456040ee4b483f78ba6a68a1887ff67ab3316c6","time":1761491612000,"email":"1030360567@qq.com","author":"uponup","message":"fix rust"}]},"filePathRelative":"rust_p/06_others/01_2派生宏.md"}');export{o as comp,u as data};
